diff --git a/node_modules/react-native-gifted-chat/lib/GiftedChat.js b/node_modules/react-native-gifted-chat/lib/GiftedChat.js
index a91d004..528d572 100644
--- a/node_modules/react-native-gifted-chat/lib/GiftedChat.js
+++ b/node_modules/react-native-gifted-chat/lib/GiftedChat.js
@@ -44,6 +44,7 @@ class GiftedChat extends React.Component {
             typingDisabled: false,
             text: undefined,
             messages: undefined,
+            contextValues: {},
         };
         this.getLocale = () => this._locale;
         this.onKeyboardWillShow = (e) => {
@@ -193,6 +194,13 @@ class GiftedChat extends React.Component {
         this.initLocale();
         this.setMessages(messages || []);
         this.setTextFromProp(text);
+        this.setState({
+            contextValues: {
+                actionSheet: this.props.actionSheet ||
+                    (() => { var _a; return (_a = this._actionSheetRef.current) === null || _a === void 0 ? void 0 : _a.getContext(); }),
+                getLocale: this.getLocale,
+            }
+        })
     }
     componentWillUnmount() {
         this.setIsMounted(false);
@@ -350,14 +358,14 @@ class GiftedChat extends React.Component {
     renderMessages() {
         const { messagesContainerStyle, ...messagesContainerProps } = this.props;
         const fragment = (<View style={[
-                {
-                    height: this.state.messagesContainerHeight,
-                },
-                messagesContainerStyle,
-            ]}>
-        <MessageContainer {...messagesContainerProps} invertibleScrollViewProps={this.invertibleScrollViewProps} messages={this.getMessages()} forwardRef={this._messageContainerRef} isTyping={this.props.isTyping}/>
-        {this.renderChatFooter()}
-      </View>);
+            {
+                height: this.state.messagesContainerHeight,
+            },
+            messagesContainerStyle,
+        ]}>
+            <MessageContainer {...messagesContainerProps} invertibleScrollViewProps={this.invertibleScrollViewProps} messages={this.getMessages()} forwardRef={this._messageContainerRef} isTyping={this.props.isTyping} />
+            {this.renderChatFooter()}
+        </View>);
         return this.props.isKeyboardInternallyHandled ? (<KeyboardAvoidingView enabled>{fragment}</KeyboardAvoidingView>) : (fragment);
     }
     resetInputToolbar() {
@@ -400,7 +408,7 @@ class GiftedChat extends React.Component {
         if (this.props.renderInputToolbar) {
             return this.props.renderInputToolbar(inputToolbarProps);
         }
-        return <InputToolbar {...inputToolbarProps}/>;
+        return <InputToolbar {...inputToolbarProps} />;
     }
     renderChatFooter() {
         if (this.props.renderChatFooter) {
@@ -416,26 +424,20 @@ class GiftedChat extends React.Component {
     }
     render() {
         if (this.state.isInitialized === true) {
-            const actionSheet = this.props.actionSheet ||
-                (() => { var _a; return (_a = this._actionSheetRef.current) === null || _a === void 0 ? void 0 : _a.getContext(); });
-            const { getLocale } = this;
-            return (<GiftedChatContext.Provider value={{
-                    actionSheet,
-                    getLocale,
-                }}>
-          <View testID={TEST_ID.WRAPPER} style={styles.wrapper}>
-            <ActionSheetProvider ref={this._actionSheetRef}>
-              <View style={styles.container} onLayout={this.onMainViewLayout}>
-                {this.renderMessages()}
-                {this.renderInputToolbar()}
-              </View>
-            </ActionSheetProvider>
-          </View>
-        </GiftedChatContext.Provider>);
+            return (<GiftedChatContext.Provider value={this.state.contextValues}>
+                <View testID={TEST_ID.WRAPPER} style={styles.wrapper}>
+                    <ActionSheetProvider ref={this._actionSheetRef}>
+                        <View style={styles.container} onLayout={this.onMainViewLayout}>
+                            {this.renderMessages()}
+                            {this.renderInputToolbar()}
+                        </View>
+                    </ActionSheetProvider>
+                </View>
+            </GiftedChatContext.Provider>);
         }
         return (<View testID={TEST_ID.LOADING_WRAPPER} style={styles.container} onLayout={this.onInitialLayoutViewLayout}>
-        {this.renderLoading()}
-      </View>);
+            {this.renderLoading()}
+        </View>);
     }
 }
 GiftedChat.defaultProps = {
